version: '3.9'
name: tolle-karten-back
services:
  app:
    build:
      context: ../../../
      dockerfile: ./src/deployment/local/Dockerfile
    container_name: "tolle-karten-app"
    volumes:
      - ../../tkbproj/:/app
      - static_volume:/app/static
      - media_volume:/app/media
    expose:
      - 8000
    environment:
      - DJANGO_SETTINGS_MODULE=tkbproj.settings.local
      - DB_ENGINE=django.db.backends.postgresql_psycopg2
      - DB_HOST=tolle-karten-db
      - DB_DB=postgres
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    depends_on:
        worker:
          condition: service_started
        redis:
          condition: service_started
        db:
          condition: service_healthy
    networks:
      - network_back

  worker:
    build:
      context: ../../../
      dockerfile: ./src/deployment/local/Dockerfile
    container_name: "tolle-karten-worker"
    volumes:
      - ../../tkbproj/:/app
      - static_volume:/app/static
      - media_volume:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=tkbproj.settings.local
      - DB_ENGINE=django.db.backends.postgresql_psycopg2
      - DB_HOST=tolle-karten-db
      - DB_DB=postgres
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    command: ['celery', '-A', 'tkbproj.celery', 'worker', '-l', 'info']
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    networks:
      - network_back
      - network_front

  redis:
    image: "redis:latest"
    container_name: "tolle-karten-redis"
    volumes:
      - redis-data:/data
    expose:
      - 6379
    networks:
      - network_back

  db:
    image: postgres:13
    container_name: "tolle-karten-db"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=postgres
    healthcheck:
      test: pg_isready -U postgres -d postgres
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - db-data:/var/lib/postgresql/data/:Z
    expose:
      - 5432
    networks:
      - network_back

  nginx:
    build:
      context: ../../
      dockerfile: ./deployment/nginx/local/Dockerfile
    container_name: "tolle-karten-nginx"
    environment:
      - HOST_NAME=tolle-karten-app
      - PORT=8000
    ports:
      - 8001:80
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    networks:
      - network_front
      - network_back
    depends_on:
      app:
        condition: service_started

volumes:
  redis-data:
  db-data:
  static_volume:
  media_volume:

networks:
  network_front:
    driver: bridge
    name: tolle-karten-front
  network_back:
    driver: bridge
    internal: true
    name: tolle-karten-back
